diff --git a/src/declarative/graphicsitems/qdeclarativemousearea.cpp b/src/declarative/graphicsitems/qdeclarativemousearea.cpp
index 26242bc..9d445b7 100644
--- a/src/declarative/graphicsitems/qdeclarativemousearea.cpp
+++ b/src/declarative/graphicsitems/qdeclarativemousearea.cpp
@@ -389,6 +389,9 @@ void QDeclarativeMouseArea::mousePressEvent(QGraphicsSceneMouseEvent *event)
             d->pressAndHoldTimer.start(PressAndHoldDelay, this);
         setKeepMouseGrab(false);
         event->setAccepted(setPressed(true));
+
+        if(!event->isAccepted() && d->forwardToList.count())
+           d->forwardEvent(event);
     }
 }
 
@@ -459,6 +462,9 @@ void QDeclarativeMouseArea::mouseMoveEvent(QGraphicsSceneMouseEvent *event)
     d->moved = true;
     QDeclarativeMouseEvent me(d->lastPos.x(), d->lastPos.y(), d->lastButton, d->lastButtons, d->lastModifiers, false, d->longPress);
     emit positionChanged(&me);
+
+    if(!event->isAccepted() && d->forwardToList.count())
+        d->forwardEvent(event);
 }
 
 
@@ -474,6 +480,9 @@ void QDeclarativeMouseArea::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
         if (!acceptHoverEvents())
             setHovered(false);
         setKeepMouseGrab(false);
+
+        if(!event->isAccepted() && d->forwardToList.count())
+            d->forwardEvent(event);
     }
 }
 
@@ -681,4 +690,11 @@ QDeclarativeDrag *QDeclarativeMouseArea::drag()
     \snippet doc/src/snippets/declarative/drag.qml 0
 */
 
+QDeclarativeListProperty<QGraphicsObject> QDeclarativeMouseArea::forwardTo()
+{
+    Q_D(QDeclarativeMouseArea);
+    return d->forwardTo;
+}
+
+
 QT_END_NAMESPACE
diff --git a/src/declarative/graphicsitems/qdeclarativemousearea_p.h b/src/declarative/graphicsitems/qdeclarativemousearea_p.h
index db49b57..0837557 100644
--- a/src/declarative/graphicsitems/qdeclarativemousearea_p.h
+++ b/src/declarative/graphicsitems/qdeclarativemousearea_p.h
@@ -116,6 +116,7 @@ class Q_DECLARATIVE_EXPORT QDeclarativeMouseArea : public QDeclarativeItem
     Q_PROPERTY(Qt::MouseButtons acceptedButtons READ acceptedButtons WRITE setAcceptedButtons NOTIFY acceptedButtonsChanged)
     Q_PROPERTY(bool hoverEnabled READ acceptHoverEvents WRITE setAcceptHoverEvents)
     Q_PROPERTY(QDeclarativeDrag *drag READ drag CONSTANT) //### add flicking to QDeclarativeDrag or add a QDeclarativeFlick ???
+    Q_PROPERTY(QDeclarativeListProperty<QGraphicsObject> forwardTo READ forwardTo);
 
 public:
     QDeclarativeMouseArea(QDeclarativeItem *parent=0);
@@ -137,6 +138,8 @@ public:
 
     QDeclarativeDrag *drag();
 
+    QDeclarativeListProperty<QGraphicsObject> forwardTo();
+
 Q_SIGNALS:
     void hoveredChanged();
     void pressedChanged();
diff --git a/src/declarative/graphicsitems/qdeclarativemousearea_p_p.h b/src/declarative/graphicsitems/qdeclarativemousearea_p_p.h
index 88206cd..f960b3a 100644
--- a/src/declarative/graphicsitems/qdeclarativemousearea_p_p.h
+++ b/src/declarative/graphicsitems/qdeclarativemousearea_p_p.h
@@ -69,6 +69,8 @@ public:
     QDeclarativeMouseAreaPrivate()
       : absorb(true), hovered(false), pressed(false), longPress(false), drag(0)
     {
+        Q_Q(QDeclarativeMouseArea);
+        forwardTo = QDeclarativeListProperty<QGraphicsObject>(q, forwardToList);
     }
 
     ~QDeclarativeMouseAreaPrivate();
@@ -86,6 +88,18 @@ public:
         lastModifiers = event->modifiers();
     }
 
+    void forwardEvent(QGraphicsSceneMouseEvent* event)
+    {
+        Q_Q(QDeclarativeMouseArea);
+        for(int i=0; i < forwardToList.count(); i++){
+            event->setPos(forwardToList[i]->mapFromScene(event->scenePos()));
+            forwardToList[i]->scene()->sendEvent(forwardToList[i], event);
+            if(event->isAccepted())
+                break;
+        }
+        event->setPos(q->mapFromScene(event->scenePos()));
+    }
+
     bool isConnected(const char *signal) {
         Q_Q(QDeclarativeMouseArea);
         int idx = QObjectPrivate::get(q)->signalIndex(signal);
@@ -109,6 +123,9 @@ public:
     Qt::MouseButtons lastButtons;
     Qt::KeyboardModifiers lastModifiers;
     QBasicTimer pressAndHoldTimer;
+
+    QDeclarativeListProperty<QGraphicsObject> forwardTo;
+    QList<QGraphicsObject*> forwardToList;
 };
 
 QT_END_NAMESPACE
